{
  "language": "Solidity",
  "sources": {
    "contracts/E-commerce.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.9;\r\n\r\ncontract E_commerce {\r\n    address public owner;\r\n\r\n    struct Item {\r\n        address deployerAddress;\r\n        string name;\r\n        string category;\r\n        string image;\r\n        uint256 cost;\r\n    }\r\n\r\n    struct Order {\r\n        uint256 time;\r\n        Item item;\r\n    }\r\n    Item[] public allItems;\r\n    mapping(string => Item) public items;\r\n    mapping(address => Item[]) private userItems;\r\n    mapping(address => Item[]) private broughtItems;\r\n    mapping(address => uint256) public orderCount;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function list(\r\n        string memory _name,\r\n        string memory _category,\r\n        string memory _image,\r\n        uint256 _cost\r\n    ) public {\r\n        // Create Item\r\n        Item memory item = Item(msg.sender, _name, _category, _image, _cost);\r\n\r\n        // Add Item to mapping\r\n        allItems.push(item);\r\n        userItems[msg.sender].push(item);\r\n        items[_name] = item;\r\n    }\r\n\r\n    function getUserItemList(address user) public view returns (Item[] memory) {\r\n        return userItems[user];\r\n    }\r\n\r\n    function getUserbroughtItems(\r\n        address user\r\n    ) public view returns (Item[] memory) {\r\n        return broughtItems[user];\r\n    }\r\n\r\n    function getAllItems() public view returns (Item[] memory) {\r\n        return allItems;\r\n    }\r\n\r\n    function buy(string memory name, address reciverAdress) public payable {\r\n        require(\r\n            items[name].deployerAddress == reciverAdress,\r\n            \"Item with the given name does not exist\"\r\n        );\r\n        require(items[name].cost == msg.value, \"missing some eth\");\r\n        (bool callSeccess, ) = payable(reciverAdress).call{value: msg.value}(\r\n            \"\"\r\n        );\r\n        require(callSeccess, \"Call Failed\");\r\n        broughtItems[msg.sender].push(items[name]);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}